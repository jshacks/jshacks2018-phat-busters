{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Recipe Textual Similarity","version":"0.3.2","provenance":[{"file_id":"1l7KZcuFD2hxDJxtFh6I9EqGJUjdcznfQ","timestamp":1540649451820}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"ixiVq4hRNj1M","colab_type":"code","colab":{}},"cell_type":"code","source":["import tensorflow as tf\n","import tensorflow_hub as hub\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import pandas as pd\n","import re\n","import seaborn as sns"],"execution_count":0,"outputs":[]},{"metadata":{"id":"E-I92D81Klq9","colab_type":"code","colab":{}},"cell_type":"code","source":["# Install the PyDrive wrapper & import libraries.\n","# This only needs to be done once per notebook.\n","!pip install -U -q PyDrive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# Authenticate and create the PyDrive client.\n","# This only needs to be done once per notebook.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","\n","# List .txt files in the root.\n","#\n","# Search query reference:\n","# https://developers.google.com/drive/v2/web/search-parameters\n","file_id = '10Nb8L7imXDrUVlwdYIYd8QHNqNGSQhob'\n","downloaded = drive.CreateFile({'id': file_id})\n","recipes = downloaded.GetContentString().split(\"\\r\\n\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"P4tXhdloe3e7","colab_type":"code","colab":{}},"cell_type":"code","source":["module_url = \"https://tfhub.dev/google/universal-sentence-encoder/2\" #@param [\"https://tfhub.dev/google/universal-sentence-encoder/2\", \"https://tfhub.dev/google/universal-sentence-encoder-large/3\"]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gnf914fD2yNA","colab_type":"code","colab":{}},"cell_type":"code","source":["# Import the Universal Sentence Encoder's TF Hub module\n","embed = hub.Module(module_url)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lJEIFnHmgPd1","colab_type":"code","colab":{}},"cell_type":"code","source":["def plot_similarity(labels, features, rotation):\n","  corr = np.inner(features, features)\n","  sns.set(font_scale=1.2)\n","  g = sns.heatmap(\n","      corr,\n","      xticklabels=labels,\n","      yticklabels=labels,\n","      vmin=0,\n","      vmax=1,\n","      cmap=\"YlOrRd\")\n","  g.set_xticklabels(labels, rotation=rotation)\n","  g.set_title(\"Semantic Textual Similarity\")\n","\n","\n","def run_and_plot(session_, input_tensor_, messages_, encoding_tensor):\n","  message_embeddings_ = session_.run(\n","      encoding_tensor, feed_dict={input_tensor_: messages_})\n","  plot_similarity(messages_, message_embeddings_, 90)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hlJqrmsjgSEo","colab_type":"code","colab":{}},"cell_type":"code","source":["messages = [\"Chicken with Rice\"] + recipes\n","similarity_input_placeholder = tf.placeholder(tf.string, shape=(None))\n","similarity_message_encodings = embed(similarity_input_placeholder)\n","with tf.Session() as session:\n","  session.run(tf.global_variables_initializer())\n","  session.run(tf.tables_initializer())\n","  message_embeddings_ = session.run(\n","      similarity_message_encodings, feed_dict={similarity_input_placeholder: messages})\n","  similarityArray = np.inner(message_embeddings_, message_embeddings_)[0][1:].tolist()\n","  sortedArray = similarityArray.copy()\n","  sortedArray.sort()\n","  sortedArray.reverse()\n","  for i in range(5):\n","    print(recipes[similarityArray.index(sortedArray[i])])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"kXBysUId51nU","colab_type":"text"},"cell_type":"markdown","source":["Tasks:\n","\n","\n","1.   Re-create text of IMDB reviews using code from example 1.3\n","2.   Calculate embeddings for all reviews from training dataset.\n","3.   Implement \"search\" mechanism, where, for a given \"query\" text we look for the 10 nearest embeddings and display the corresponding reviews.\n","\n"]},{"metadata":{"id":"PDwdOU505Uoz","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}